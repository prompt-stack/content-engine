"""Add status and progress tracking to extractions

Revision ID: 25b39fc0adaa
Revises: f7a91c41953b
Create Date: 2025-10-17 10:16:53.917003

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '25b39fc0adaa'
down_revision: Union[str, None] = 'f7a91c41953b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop captures table (legacy)
    op.drop_index('ix_captures_created_at', table_name='captures', if_exists=True)
    op.drop_index('ix_captures_title', table_name='captures', if_exists=True)
    op.drop_index('ix_captures_user_id', table_name='captures', if_exists=True)
    op.drop_table('captures', if_exists=True)

    # Add new columns for status tracking
    op.add_column('extractions', sa.Column('completed_at', sa.DateTime(), nullable=True))

    # Add status column as nullable first
    op.add_column('extractions', sa.Column('status', sa.String(length=20), nullable=True))

    # Update existing rows to have 'completed' status (they're already done)
    op.execute("UPDATE extractions SET status = 'completed' WHERE status IS NULL")

    # Now make it NOT NULL
    op.alter_column('extractions', 'status', nullable=False)

    # Add progress column as nullable first
    op.add_column('extractions', sa.Column('progress', sa.Integer(), nullable=True))

    # Set existing rows to 100% (they're completed)
    op.execute("UPDATE extractions SET progress = 100 WHERE progress IS NULL")

    # Now make it NOT NULL
    op.alter_column('extractions', 'progress', nullable=False)

    # Add other optional columns
    op.add_column('extractions', sa.Column('progress_message', sa.String(length=256), nullable=True))
    op.add_column('extractions', sa.Column('error_message', sa.Text(), nullable=True))

    # Create index on status
    op.create_index(op.f('ix_extractions_status'), 'extractions', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_extractions_status'), table_name='extractions')
    op.drop_column('extractions', 'error_message')
    op.drop_column('extractions', 'progress_message')
    op.drop_column('extractions', 'progress')
    op.drop_column('extractions', 'status')
    op.drop_column('extractions', 'completed_at')
    op.create_table('captures',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='captures_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='captures_pkey')
    )
    op.create_index('ix_captures_user_id', 'captures', ['user_id'], unique=False)
    op.create_index('ix_captures_title', 'captures', ['title'], unique=False)
    op.create_index('ix_captures_created_at', 'captures', ['created_at'], unique=False)
    # ### end Alembic commands ###
